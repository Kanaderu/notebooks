import numpy as np
import neuron

class Accumulator(object):
    """Represents an accumulator
    Parameters:
        threshold: (int) threshold at which neuron will spike
    """
    def __init__(self, threshold):
        assert type(threshold) in [int, np.int, np.int64]
        self.threshold = threshold

    def accumulate(self, spikes_in):
        """Computes the output spike times of the accumulator
        Inputs:
            spikes_in:
        Outputs:
            spikes_out:
        """
        cur_state = 0
        state = [0]
        time = [0.]
        spike_times = []
        spike_weights = []

        for t, w in zip(spikes_in.times, spikes_in.weights):
            time.append(t)
            state.append(cur_state)
            cur_state += w
            time.append(t)
            state.append(cur_state)

            if cur_state >= self.threshold:
                spike_times.append(t)
                spike_weights.append(1)
                cur_state -= self.threshold
                time.append(t)
                state.append(cur_state)
            elif cur_state <= -self.threshold:
                spike_times.append(t)
                spike_weights.append(-1)
                cur_state += self.threshold
                time.append(t)
                state.append(cur_state)
        spikes_out = SpikeTrain(spike_times, spike_weights)
        state = AccumulatorState(time, state)
        return spikes_out, state

class Pool(object):
    """A pool of neurons with an accumulator
    Parameters
    ----------
    neurons: list of Neurons
    threshold: threshold of accumulator
    """
    def __init__(self, neurons, threshold):
        self.neurons = neurons
        # [neuron(spike_rate, weight, T0)
        #                 for spike_rate, weight, T0
        #                 in zip(spike_rates, weights, T0s)
        # ]
        self.acc = Accumulator(threshold)

    def gen_nrn_spikes(self, T):
        """Generate spikes from neurons and merge them in a single spike train
        """
        spikes = [neuron.generate_spikes(T) for neuron in self.neurons]
        return spikes

    def merge_spikes(self, spikes_in):
        """Merge spikes from multiple neurons into a single spike train
        """
        spike_times = []
        spike_weights = []
        for spikes in spikes_in:
            spike_times.extend(spikes.times)
            spike_weights.extend(spikes.weights)
        sort_idx = np.argsort(spike_times)
        spikes_out = SpikeTrain(np.array(spike_times)[sort_idx],
                                np.array(spike_weights)[sort_idx])
        return spikes_out

    def gen_acc_spikes(self, spikes_in):
        """Run the accumulator on the spike trains generated by generate_spikes
        """
        spikes_out, acc_state = self.acc.accumulate(spikes_in)
        return spikes_out, acc_state
