# defines a pool containing neurons and an accumulator
import numpy as np
from acc import Accumulator
from neuron import RegularNeuron
from datatypes import SpikeTrain, set_list_var

class Pool(object):
    """A pool of neurons with an accumulator
    Parameters
    ----------
    neurons: list of Neurons
    threshold: threshold of accumulator
    """
    def __init__(self, neurons, threshold):
        self.neurons = neurons
        self.acc = Accumulator(threshold)

    def gen_nrn_spikes(self, T=None, nspikes=None):
        """Generate spikes from neurons and merge them in a single spike train
        """
        spikes = [neuron.generate_spikes(T=T, nspikes=nspikes)
            for neuron in self.neurons]
        return spikes

    def merge_spikes(self, spikes_in):
        """Merge spikes from multiple neurons into a single spike train
        """
        spike_times = []
        spike_weights = []
        for spikes in spikes_in:
            spike_times.extend(spikes.times)
            spike_weights.extend(spikes.weights)
        sort_idx = np.argsort(spike_times)
        spikes_out = SpikeTrain(np.array(spike_times)[sort_idx],
                                np.array(spike_weights)[sort_idx])
        return spikes_out

    def gen_acc_spikes(self, spikes_in):
        """Run the accumulator on the spike trains generated by generate_spikes
        """
        spikes_out, acc_state = self.acc.accumulate(spikes_in)
        return spikes_out, acc_state

def build_pool(N, input_rates, weights, threshold, neuron_model=RegularNeuron):
    """Utility for building a Pool
    """
    spike_rates = set_list_var(input_rates, N)
    weights = set_list_var(weights, N)
    
    neurons = [neuron_model(spike_rate, weight) for 
               spike_rate, weight in
               zip(spike_rates, weights)]
    pool = Pool(neurons=neurons, threshold=threshold)
    return pool

